/* LOGINCommand.cc */

#include	<string>
#include	<iomanip.h>

#include	"md5hash.h"
#include	"StringTokenizer.h"
#include	"ELog.h"
#include	"Network.h"
#include	"nsUser.h"
#include	"nickserv.h"
#include	"sqlnsUser.h"

const char LOGINCommand_cc_rcsId[] = "$Id: LOGINCommand.cc,v 1.1 2002-01-14 23:33:38 jeekay Exp $" ;

namespace gnuworld
{

namespace nserv
{

using namespace gnuworld;

bool LOGINCommand::Exec( iClient* theClient, const string& Message )
{

StringTokenizer st( Message ) ;
if( st.size() != 2 )
	{
	Usage(theClient);
	return true;
	}

/*
 * Check theClient isn't already logged in, if so, tell
 * them they shouldn't be.
 */

nsUser* tmpUser = bot->isAuth(theClient);
if (tmpUser)
	{
	bot->Notice(theClient,"You are already logged in!");
	return false;
	}

/*
 * Find the user record, confirm authorisation and attach the record
 * to this client.
 */

if(st[1][0] == '#')
{
	bot->Notice(theClient, "AUTHENTICATION FAILED as %s.", theClient->getNickName().c_str());
	return false;
}

// TODO: Force a refresh of the user's info from the db
sqlnsUser* theUser = new (std::nothrow) sqlnsUser(bot->SQLDb);

if( !theUser->loadData(theClient->getNickName() ))
	{
	bot->Notice(theClient,"AUTHENTICATION FAILED as %s.",
		theClient->getNickName().c_str());
	return false;
	}

/*
 *  Compare password with MD5 hash stored in user record.
 */

// MD5 hash algorithm object.
md5	hash;

// MD5Digest algorithm object.
md5Digest digest;

string salt = theUser->getPassword().substr(0, 8);
string md5Part = theUser->getPassword().substr(8);
string guess = salt + st.assemble(1);

// Build a MD5 hash based on our salt + the guessed password.
hash.update( (const unsigned char *)guess.c_str(), guess.size() );
hash.report( digest );

// Convert the digest into an array of int's to output as hex for
// comparison with the passwords generated by PHP.
int data[ MD5_DIGEST_LENGTH ] = { 0 } ;

for( size_t ii = 0; ii < MD5_DIGEST_LENGTH; ii++ )
	{
	data[ii] = digest[ii];
	}

strstream output;
output << hex;
output.fill('0');

for( size_t ii = 0; ii < MD5_DIGEST_LENGTH; ii++ )
	{
	output << setw(2) << data[ii];
	}
output << ends;

if(md5Part != output.str() ) // If the MD5 hash's don't match..
	{
	bot->Notice(theClient,"AUTHENTICATION FAILED as %s.",
		theClient->getNickName().c_str());

	delete[] output.str() ;
	return false;
	}

delete[] output.str() ;

bot->removeFromQueue(theClient);
bot->authUser(theClient, theClient->getNickName());


bot->Notice(theClient,"AUTHENTICATION SUCCESSFUL AS %s.",
theClient->getNickName().c_str());
#ifdef EDEBUG
bot->logDebugMessage(theClient->getCharYYXXX() + " - Logged In");
#endif

return true;
}

}

} // namespace gnuworld.

